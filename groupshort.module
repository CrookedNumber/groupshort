<?php

/**
 * Implementation of hook_init().
 */
function groupshort_init() {
	drupal_add_css(drupal_get_path('module', 'groupshort') .'/css/gs.css');
  if ($_GET['q']) {
    $url = db_result(db_query("SELECT url FROM {groupshort_links} WHERE code='%s'", $_GET['q']));
    if ($url) {
      drupal_goto($url);
      exit();
    }
  }  
}

/**
* Implementation of hook_perm().
*/
function groupshort_perm() {

	return array('access groupshort', 'create groupshort', 'administer groupshort', 'edit own groupshort', 'delete own groupshort');

} // function groupshort_perm

/**
* Implementation of hook_access().
*/
function groupshort_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create groupshort', $account) ? TRUE : NULL;
    break;
    case 'update':
    	return user_access('edit own groupshort', $account) ? TRUE : NULL;
    break;
    case 'delete':
    	return user_access('delete own groupshort', $account) ? TRUE : NULL;
	}
}
/**
* Implementation of hook_menu().
*/
function groupshort_menu() {
  return array(
    'groupshort_short_info' => array(
      'arguments' => array('node'),
    ),
  );

} // function groupshort_menu


/**
* Implementation of hook_node_info().
*/
function groupshort_node_info() {
  return array(
    'groupshort' => array(
      'name' => t('Short URL'), // Required.
      'module' => 'groupshort', // Required.
      'description' => t('A short URL for any longer URL.'), // Required.
      'has_body' => TRUE,
      'body_label' => t('Notes'),
      'locked' => TRUE,
    )
  );
}

/**
* Implementation of hook_form().
*/
function groupshort_form(&$node, $form_state) {
  
  $type = node_get_types('type', $node);
  
  $form['title']['#type'] = 'hidden';
  
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL you would like to shorten'),
    '#description' => t('Enter full URL, including http:// (or https://).'),
    '#required' => TRUE,
    '#default_value' => isset($node->url) ? $node->url : '',
    '#weight' => -5,
    '#maxlength' => 255,
  );

  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Shortcut'),
    '#description' => t('Enter your desired shortcut for your alias. Numbers, letters, and hyphens only, please. No slashes. If you do not supply a shortcut, one will be auto-generated for you.'),
    '#default_value' => isset($node->code) ? $node->code : '',
    '#weight' => -4,
    '#maxlength' => 255,
  );
  
  if ($type->has_body) {
    // In Drupal 6, we can use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }
  
  return $form;
}

function groupshort_validate($node, &$form) {
  if (!valid_url($node->url, TRUE)) {
    form_set_error('url', 'Please enter a valid URL.');
  }
  if ($node->code != '' && !ctype_alnum(str_replace('-', '', $node->code))) {
    form_set_error('code', 'Please use only numbers, letters and hyphens.');
  }
  if ($node->code != '' && _groupshort_path_taken($node->code) && $node->code != _groupshort_get_code($node->vid)) {
    form_set_error('code', 'Sorry this code is already taken.');
  }
}

function groupshort_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'presave') {
  	if ($node->type != 'groupshort') return;
    if (!$node->code) {
      $node->code = _groupshort_get_code();
      // Returns unique, random code
      // yes, I'm aware that this *could* lead to a collision
      // and that, done properly, we'd use some sort of
      // alphanumeric auto-increment (see shorturl module)
      // or, better yet, a database transaction (!)
      //
      // But I'm willing to take the chance that
      // a number (in the range 1 and 36^4)
      // won't come up twice in the span of a few hundred (if that?)
      // milliseconds
    }
    $node->title = $node->code;
  }
}

function groupshort_insert(&$node) {
  $record = new stdClass();
  $record->code = $node->code;
  $record->url = $node->url;
  $record->nid = $node->nid;
  $record->vid = $node->vid;
  drupal_write_record('groupshort_links', $record);
  drupal_set_message(check_url(base_path() . $node->code) . ' now points to ' . $node->url);
}
function groupshort_theme() {
  return array(
    'short_info' => array(
      'arguments' => array('node'),
    ),
  );
}

function groupshort_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
	$node->content['code'] = array(
	  '#value' => theme('short_info', $node),
	  '#weight' => 2,
	);
	return $node;
}

function theme_short_info($node) {
	$fullurl = check_url($GLOBALS['base_url'] . '/' . $node->code);
	$output = '<div class="short_info"><p class="gs_fullurl">' . l($fullurl,$fullurl) . '</p><p>now points to:<br>' . $node->url . '</div>';
	return $output;
}


function groupshort_load (&$node) {
  return db_fetch_object(db_query('SELECT code, url FROM {groupshort_links} WHERE vid = %d', $node->vid));
}

function groupshort_update(&$node) {
  $record = new stdClass();
  $record->code = $node->code;
  $record->url = $node->url;
  $record->nid = $node->nid;
  $record->vid = $node->vid;
  drupal_write_record('groupshort_links', $record, array('vid'));
  drupal_set_message(check_url(base_path() . $node->code) . ' now points to ' . $node->url);
}

function groupshort_delete(&$node) {
  db_query("DELETE FROM {groupshort_links} WHERE nid=%d", $node->nid);
}

function _groupshort_generate_code($length = 4, $type = 'alphanum') {
  $output = '';
  for ($x=1; $x <= $length; $x++) {
    if ($type == 'alphanum') {
      $num = rand(1, 36);
      if ($num > 26) {
        $num = 21 + $num;
      }
      else {
        $num = 96 + $num;
      }
    }
    if ($type == 'alpha') {
      $num = chr(rand(97, 122));
    }
    $output .= chr($num);
  }
  return $output;
}

function _groupshort_path_taken($path) {
  $path = trim($path, '/');
  $exists = db_result(db_query("SELECT code FROM {groupshort_links} WHERE code='%s'", $path));
  if ($exists) {
    return TRUE;
  }
  return drupal_lookup_path($path);
}

function _groupshort_get_code ($vid = NULL) {
  if ($vid) { // if we already know vid, send corresponding code, or FALSE if ! exists
    return db_result(db_query("SELECT code FROM {groupshort_links} WHERE vid=%d", $vid));
  }
  // else generate unique code
  while($code = _groupshort_generate_code()) {
    if (_groupshort_path_taken($code)) {
      continue;
    }
    return $code;
  }
}


/**
 * Implementation of hook_views_api().
 */
function groupshort_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'groupshort') . '/includes',
  );
}
